import os

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiohttp.log import client_logger
from aiogram.types import FSInputFile

from db.crud import get_user_cards, add_new_card
from tg_bot.handlers.my_cards import cmd_my_cards
from tg_bot.keyboards.callback_factories import AddCardCF
from tg_bot.states.adding_card import AddingCardMessage
from utils.volna_api import VolnaCard

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    user_cards = get_user_cards(telegram_id=message.from_user.id)
    if user_cards:
        await cmd_my_cards(message, state)
    else:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üÜï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
            callback_data=AddCardCF(telegram_id=message.from_user.id)
        )
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ \"–í–æ–ª–Ω–∞ –ë–∞–ª—Ç–∏–∫–∏\"!"
                 f"\n\n–° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Å —É–¥–æ–±—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∑–¥–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö, –∞ —Ç–∞–∫–∂–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –°–ë–ü."
                 f"\n\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /info"
                 f"\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
            reply_markup=builder.as_markup()
        )


@router.callback_query((AddCardCF.filter()))
async def add_card(callback: CallbackQuery, callback_data: AddCardCF, state: FSMContext):
    await state.clear()

    await callback.message.delete()

    user_cards = get_user_cards(telegram_id=callback_data.telegram_id)
    if len(user_cards) < 5:

        builder = ReplyKeyboardBuilder()
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        )

        await callback.message.answer_photo(
            photo=FSInputFile(os.path.join(os.getenv('ROOT_FOLDER'), 'static_data', 'images', 'card_back_number.png')),
            caption="<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
                    "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã. –û–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç—ã –ø–æ–¥ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(AddingCardMessage.waiting_for_msg)
    else:
        await callback.message.answer(
            text="<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
                 "\n\n–ö –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–∏–≤—è–∑–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç (5). –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"
        )


@router.message(AddingCardMessage.waiting_for_msg)
async def add_card_process(message: Message, state: FSMContext):
    await state.clear()

    input_card_number = message.text.strip()

    if input_card_number == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        await cmd_start(message, state)

    elif input_card_number.isdigit():
        volna = VolnaCard(card_number=int(input_card_number))
        if volna.all_card_info is not None:
            add_new_card(card_number=int(input_card_number), telegram_id=message.from_user.id)
            await message.answer(
                text=f"<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
                     f"\n\n–ö–∞—Ä—Ç–∞ <b>{volna.card_number}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /my_cards, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                text="–ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ø—Ä–æ–±–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
            )
            await state.set_state(AddingCardMessage.waiting_for_msg)
    else:
        await message.answer(
            text="–ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ø—Ä–æ–±–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
        )
        await state.set_state(AddingCardMessage.waiting_for_msg)
