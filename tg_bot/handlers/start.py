import os

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import FSInputFile

from tg_bot.db.crud import get_user_cards, add_new_card
from tg_bot.handlers.my_cards import cmd_my_cards
from tg_bot.keyboards.callback_factories import AddCardCF
from tg_bot.states.adding_card import AddingCardMessage, AddingCardNameMessage
from utils.volna_api import VolnaCard

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    user_cards = get_user_cards(telegram_id=message.from_user.id)
    if user_cards:
        await cmd_my_cards(message, state)
    else:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üÜï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
            callback_data=AddCardCF(telegram_id=message.from_user.id)
        )
        await message.answer(
            text=f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ ¬´–í–æ–ª–Ω–∞ –ë–∞–ª—Ç–∏–∫–∏¬ª!"
                 f"\n\nüëÄ –° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Å —É–¥–æ–±—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∑–¥–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö, –∞ —Ç–∞–∫–∂–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –°–ë–ü."
                 f"\n\n‚ÑπÔ∏è –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /info"
                 f"\n\nüöé –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
            reply_markup=builder.as_markup()
        )


@router.callback_query((AddCardCF.filter()))
async def add_card(callback: CallbackQuery, callback_data: AddCardCF, state: FSMContext):
    await state.clear()

    await callback.message.delete()

    user_cards = get_user_cards(telegram_id=callback_data.telegram_id)
    if len(user_cards) < 5:

        builder = ReplyKeyboardBuilder()
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        )

        await callback.message.answer_photo(
            photo=FSInputFile(os.path.join(os.getenv('ROOT_FOLDER'), 'static_data', 'images', 'card_back_number.png')),
            caption="<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
                    "\n\n#Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã. –û–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç—ã –ø–æ–¥ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(AddingCardMessage.waiting_for_msg)
    else:
        await callback.message.answer(
            text="<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
                 "\n\nüî¥ –ö –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–∏–≤—è–∑–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç (5). –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"
        )


@router.message(AddingCardMessage.waiting_for_msg)
async def add_card_process(message: Message, state: FSMContext):
    await state.clear()

    input_card_number = message.text.strip()

    if input_card_number == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        await cmd_start(message, state)

    elif input_card_number.isdigit():
        volna = VolnaCard(card_number=int(input_card_number))
        if volna.all_card_info is not None:

            user_cards = [card.card_number for card in get_user_cards(telegram_id=message.from_user.id)]

            if input_card_number not in user_cards:

                await state.update_data({'card_number': input_card_number})

                builder = ReplyKeyboardBuilder()
                builder.button(
                    text="ü´• –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                )

                await message.answer(
                    text=f"<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
                         f"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞—Ä—Ç–∞ –í–∞–Ω–∏¬ª –∏–ª–∏ ¬´–ú–∞–º–∏–Ω–∞¬ª), —á—Ç–æ–±—ã –µ—ë –±—ã–ª–æ —É–¥–æ–±–Ω–æ –∏—Å–∫–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ä—Ç."
                         f"\n\n–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´ü´• –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è¬ª",
                    reply_markup=builder.as_markup(resize_keyboard=True)
                )

                await state.set_state(AddingCardMessage.card_name)
            else:
                await message.answer(
                    text="üòé –î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ <b>—É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞</b> –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏—É–∞—Ç—É—Ä–µ"
                )
                await state.set_state(AddingCardMessage.waiting_for_msg)
        else:
            await message.answer(
                text="üò∞ –ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º <b>–Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ø—Ä–æ–±–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
            )
            await state.set_state(AddingCardMessage.waiting_for_msg)
    else:
        await message.answer(
            text="üò∞ –ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º <b>–Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ø—Ä–æ–±–æ—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
        )
        await state.set_state(AddingCardMessage.waiting_for_msg)


@router.message(AddingCardMessage.card_name)
async def add_card_name_process(message: Message, state: FSMContext):
    card_number = await state.get_value('card_number')

    card_name = message.text.strip() if message.text.strip() != 'ü´• –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' else str(card_number)


    add_new_card(card_number=int(card_number), card_name=card_name, telegram_id=message.from_user.id)

    if card_name == str(card_number):
        text = ''
    else:
        text = f" ¬´{card_name}¬ª"

    await message.answer(
        text=f"<b>üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>"
             f"\n\nüéâ –ö–∞—Ä—Ç–∞ <b>{card_number}{text}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /cards, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        reply_markup=ReplyKeyboardRemove()
    )

    await state.clear()
